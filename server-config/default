##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# This is server config for nginx ~CF

log_format upstreamlog '[$time_local] $remote_addr - $remote_user - $server_name to: $upstream_addr: $status / upstream $upstream_status $request upstream_response_time $upstream_response_time msec $msec request_time $request_time body: $request_body';


proxy_cache_path /var/local/lattecache use_temp_path=off levels=1:2 keys_zone=latte_cache:1m max_size=2g inactive=10m;
limit_req_zone stock zone=stock:10m rate=1r/s;
rewrite_log on;


server {
	server_name stocks.lattelib.com;

	location /without-cache {
		limit_req   zone=stock  burst=100;
        proxy_pass http://dev.markitondemand.com/;
        access_log /var/log/nginx/api-upstream-access.log upstreamlog;
	}

	location / {
		proxy_pass http://stocks.lattelib.com/without-cache/;
        proxy_cache latte_cache;
        add_header X-Cache-Status $upstream_cache_status;
        proxy_hide_header Cache-Control;
        proxy_hide_header Set-Cookie;
        proxy_ignore_headers Cache-Control Set-Cookie;
        proxy_cache_valid 200 1m;
    }
}

server {
	server_name dictionary.lattelib.com;

	location / {
		proxy_cache latte_cache;
        proxy_pass http://www.dictionaryapi.com;
        add_header X-Cache-Status $upstream_cache_status;
        proxy_hide_header Cache-Control;
        proxy_hide_header Set-Cookie;
        proxy_hide_header Expires;
        proxy_ignore_headers Cache-Control Set-Cookie Expires;
        proxy_cache_valid 200 1m;
	}
}


# Default server configuration
#
#server {
	#listen 80 default_server;
	#listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	#root /var/www/html;

	# Add index.php to the list if you are using PHP
	#index index.html index.htm index.nginx-debian.html;

	#server_name _;

	#location / {
	#	# First attempt to serve request as file, then
	#	# as directory, then fall back to displaying a 404.
	#	try_files $uri $uri/ =404;
	#}

	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php7.0-cgi alone:
	#	fastcgi_pass 127.0.0.1:9000;
	#	# With php7.0-fpm:
	#	fastcgi_pass unix:/run/php/php7.0-fpm.sock;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
#}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}